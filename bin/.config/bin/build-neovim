#!/bin/zsh

# Build and install neovim for Debian
# See: https://neovim.io/
# See: https://github.com/neovim/neovim/wiki/Building-Neovim#quick-start

# Source utilities
SCRIPT_DIR="$(dirname "$(dirname "$(dirname "$(dirname "$0")")")")/scripts/install"
if [[ -f "$SCRIPT_DIR/utils.zsh" ]]; then
    source "$SCRIPT_DIR/utils.zsh"
else
    echo "Warning: utils.zsh not found, using basic echo"
    gum_style() {
        echo "$1"
    }
fi

# Save current dir
pushd . >/dev/null || exit

# Install dependencies
gum_style 'Installing dependencies...'

sudo apt update
sudo apt install -y \
	autoconf \
	automake \
	cmake \
	g++ \
	gettext \
	libncurses5-dev \
	libtool \
	libtool-bin \
	libunibilium-dev \
	libunibilium4 \
	ninja-build \
	pkg-config \
	python3-pip \
	software-properties-common \
	unzip

gum_style "Installing python3-neovim..."
# Enable use of python plugins
# Note: python neovim module was renamed to pynvim
# https://github.com/neovim/neovim/wiki/Following-HEAD#steps-to-update-pynvim-formerly-neovim-python-package
if command -v pipx >/dev/null 2>&1; then
    pipx install pynvim 2>/dev/null || echo "Warning: pynvim pipx install failed"
else
    echo "Warning: pipx not found, trying pip3 with --break-system-packages"
    pip3 install setuptools --break-system-packages 2>/dev/null || echo "Warning: setuptools install failed"
    pip3 install --upgrade pynvim --break-system-packages 2>/dev/null || echo "Warning: pynvim install failed"
fi

gum_style "Installing ruby neovim..."
if command -v gem >/dev/null 2>&1; then
    # Try to install with sudo if it's system Ruby
    if gem install neovim 2>/dev/null; then
        echo "Ruby neovim support installed successfully"
    else
        echo "Trying with sudo for system Ruby..."
        sudo gem install neovim 2>/dev/null || echo "Warning: Ruby neovim install failed"
    fi
else
    echo "Warning: gem not found, skipping ruby neovim support"
fi

gum_style "Installing node.js neovim..."
if command -v npm >/dev/null 2>&1; then
    npm install -g neovim 2>/dev/null || echo "Warning: Node.js neovim install failed"
else
    echo "Warning: npm not found, skipping node neovim support"
fi

gum_style "creating neovim directory and cloning repo..."
#Get or update neovim github repo
NEOVIM_DIR="$HOME/Projects/Personal/Github/neovim"

# Create parent directory if it doesn't exist
mkdir -p "$(dirname "$NEOVIM_DIR")" || {
    gum_style "❌ Error: Could not create parent directory for neovim"
    exit 1
}

# Navigate to parent directory
cd "$(dirname "$NEOVIM_DIR")" || {
    gum_style "❌ Error: Could not navigate to $(dirname "$NEOVIM_DIR")"
    exit 1
}

if [ ! -d "$NEOVIM_DIR" ] || [ ! -d "$NEOVIM_DIR/.git" ]; then
	gum_style "Cloning neovim repository..."
	rm -rf "$NEOVIM_DIR"
	if ! git clone https://github.com/neovim/neovim "$NEOVIM_DIR"; then
	    gum_style "❌ Error: Failed to clone neovim repository"
	    exit 1
	fi
else
	cd neovim || {
	    gum_style "❌ Error: Could not navigate to neovim directory"
	    exit 1
	}
	gum_style "Updating neovim repo..."
	if ! git pull origin; then
	    gum_style "⚠️ Warning: Failed to update neovim repo, continuing with existing version"
	fi
fi

gum_style "Checking out to master neovim..."
cd "$NEOVIM_DIR" || exit
git checkout master

gum_style "Removing old build..."
# Remove old build dir and .deps dir
rm -rf build/
rm -rf .deps/
sudo make clean && sudo make distclean

gum_style "Building neovim..."
# Build and install neovim
make CMAKE_BUILD_TYPE=Release

gum_style "Installing neovim..."
sudo make install

#Restore dir
popd >/dev/null || exit

gum_style "nvim command: $(command -v nvim)"
gum_style "nvim command: $(ls -al "$(command -v nvim)")"
