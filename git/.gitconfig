[credential "https://github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential

[user]
    email = lalit@quartic.ai
    name = Lalit Kumar

[credential]
	credentialStore = cache
	useHttpPath = true
[advice]
    statusHints = true

[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format.
    s = status -s

    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Clone a repository including all submodules.
    c = clone --recursive

    # Commit all changes.
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose

    # List aliases.
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate
    autosetupmerge = true

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    changed = red bold
    untracked = red bold
    added = green bold
    ; added = yellow
    ; changed = green
    ; untracked = cyan

[commit]
    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgsign = false
    ; template = "~/.gitmessage"

[credential "https://github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential

[core]
    editor = nvim
    pager = delta

[delta]
    line-numbers = true
    syntax-theme = cobalt2
    side-by-side = true
    file-modified-label = modified:
    navigate = true

[interactive]
    diffFilter = delta --color-only

[diff]
    # Detect copies as well as renames.
    renames = copies
    colorMoved = zebra
    tool = nvimdiff

[difftool "nvimdiff"]
    cmd = nvim -d \"$LOCAL\" \"$REMOTE\" -c \"wincmd w\" -c \"wincmd L\"

[fetch]
    prune = true

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(white)%s %C(magenta) [%an]%Creset

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[interactive]
    diffFilter = delta --color-only

[merge]
    tool = nvimdiff

[mergetool "nvimdiff"]
    cmd = nvim -d \"$LOCAL\" \"$MERGED\" \"$BASE\" \"$REMOTE\" -c \"wincmd w\" -c \"wincmd J\"

[pull]
    rebase = true

[push]
    default = current

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[gpg]
    program = gpg2

[init]
    defaultBranch = master
