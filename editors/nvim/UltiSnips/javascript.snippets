# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" !b
#		private readonly ${1} = new Emitter<${2}>()
#		public readonly ${1/^_(.*)/${1}/}: Event<${2}> = this.${1}.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet impb "import statement" !b
import { ${2} } from "${1}";${0}
endsnippet

snippet imp "import statement" !b
import ${2} from "${1}";${0}
endsnippet

snippet rfce "React Functional Component" !b
import React from 'react'

function ${1:Component}() {
	return (
			<div>
			${1}
			</div>
			)
}

export default ${1}

endsnippet

#######################################################################
#                              PropTypes                              #
#######################################################################

snippet ptf "function proptype" !b
PropTypes.func
endsnippet

snippet pts "string proptype" !b
PropTypes.string
endsnippet

snippet pta "array proptype" !b
PropTypes.array
endsnippet

snippet ptb "boolean proptype" !b
PropTypes.boolean
endsnippet

snippet pto "object proptype" !b
PropTypes.object
endsnippet

snippet ptn "number proptype" !b
PropTypes.number
endsnippet

snippet ptarrayof "arrayOf proptype" !b
PropTypes.arrayOf(${1})
endsnippet

snippet ptoneof "oneOf proptype" !b
PropTypes.oneOf([
	${1}
])
endsnippet

snippet ptshape "shape proptype" !b
PropTypes.shape({
	${1}: ${2}
})
endsnippet

# element
snippet pte "PropType Element" !b
${1:prop}: PropTypes.element,${0}
endsnippet

# element required
snippet pter "PropType Element Required" !b
${1:prop}: PropTypes.element.isRequired,${0}
endsnippet

# array
snippet pta "PropType Array" !b
${1:prop}: PropTypes.array,${0}
endsnippet

# array required
snippet ptar "PropType Array Required" !b
${1:prop}: PropTypes.array.isRequired,${0}
endsnippet

# boolean
snippet ptb "PropType Boolean" !b
${1:prop}: PropTypes.bool,${0}
endsnippet

# boolean required
snippet ptbr "PropType Boolean Required" !b
${1:prop}: PropTypes.bool.isRequired,${0}
endsnippet

# function
snippet ptf "PropType Function" !b
${1:prop}: PropTypes.func,${0}
endsnippet

# function required
snippet ptfr "PropType Function Required" !b
${1:prop}: PropTypes.func.isRequired,${0}
endsnippet

# number
snippet ptn "PropType Number" !b
${1:prop}: PropTypes.number,${0}
endsnippet

# number required
snippet ptnr "PropType Number Required" !b
${1:prop}: PropTypes.number.isRequired,${0}
endsnippet

# object
snippet pto "PropType Ojbect" !b!
${1:prop}: PropTypes.object,${0}
endsnippet

# object required
snippet ptor "PropType Ojbect Required" !b
${1:prop}: PropTypes.ojbect.isRequired,${0}
endsnippet

# string
snippet pts "PropType String" !b
${1:prop}: PropTypes.string,${0}
endsnippet

# string required
snippet ptsr "PropType String Required" !b
${1:prop}: PropTypes.string.isRequired,${0}
endsnippet

# one of type
snippet ptof "PropType One Of Type" !b
${1:prop}: PropTypes.oneOfType([${2:prop-types}]),${0}
endsnippet

# one of type required
snippet ptofr "PropType One Of Type Required" !b
${1:prop}: PropTypes.oneOfType([${2:prop-types}]).isRequired,${0}
endsnippet

# array of
snippet ptao "PropType Array Of" !b
${1:prop}: PropTypes.arrayOf(${2:prop-type}),${0}
endsnippet

# array of required
snippet ptaor "PropType Array Of Required" !b
${1:prop}: PropTypes.arrayOf(${2:prop-type}).isRequired,${0}
endsnippet

# object of
snippet ptoo "PropType Object Of" !b
${1:prop}: PropTypes.objectOf(${2:prop-type}),${0}
endsnippet

# object of required
snippet ptoor "PropType Object Of Required" !b
${1:prop}: PropTypes.objectOf(${2:prop-type}).isRequired,${0}
endsnippet

# shape of
snippet ptss "PropType Shape" !b
${1:prop}: PropTypes.shape({
		${2}
	}),${0}
endsnippet

# object of required
snippet ptssr "PropType Shape Required" !b
${1:prop}: PropTypes.shape({
		${2}
	}).isRequired,${0}
endsnippet

#######################################################################
#                             console log                             #
#######################################################################

# console.log({})
snippet log "Console Log" !b
console.log({${1:variable}})${0}
endsnippet

snippet logc "Insert log with color"
console.log('%c${1}', 'font-weight:bold;color:${2:green};');
endsnippet

#######################################################################
#                               eslint                                #
#######################################################################


snippet ign "eslint disable line" b
// eslint-disable-line ${1}
endsnippet


snippet des "Destructor Variable" b
const {${2:destructure}} = ${1:variable}
endsnippet
