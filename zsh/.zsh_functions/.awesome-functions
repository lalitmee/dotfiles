#!/usr/bin/env zsh

# NOTE: from https://gist.github.com/joelpalmer/7f92a5a337097f25f6dc8eaeb831028b

# look up synonym - (word)
# slow and buggy
syn() {
    curl -s "https://api.dictionaryapi.dev/api/v2/entries/en/$1" | jq '.[].meanings[].synonyms[]'
}

# zd - use zoxide & FZF to find and go to directory
# Not sure why zoxide query -i with FZF doesn't CD
zd() {
    local dir
    dir=$(zoxide query -l | fzf )
    cde $dir
}

# CD into {dir} and then exag
cde() {
    cd $1
}

# create new rust bin proj, move in to it then open src/main.rs & toml
cn() {
    cargo new $1
    cd $1
    nvim src/main.rs Cargo.toml
}

# create new rust lib proj, move in to it then open src/lib.rs & toml
cnl() {
    cargo new $1 --lib
    cd $1
    nvim src/lib.rs Cargo.toml
}

# rust std docs find:  rustup doc get result or search
rds() {
    local query
    query=$1
    rustup doc --std $1 || (echo "Searching..." && open "https://doc.rust-lang.org/std/?search=$query")
}

# rust core doc find:  rustup doc get result or search
rdc() {
    local query
    query=$1
    rustup doc --core $1 || (echo "Searching..." && open "https://doc.rust-lang.org/core/?search=$query")
}

# search the cargo docs
cargodocs() {
    open "https://doc.rust-lang.org/cargo/index.html?search=$1"
}

# set Active Browser Tab: @titleText → finds tab with title that contains the text
abt() {
    osascript ~/dotfiles/osascripts/tabact.scpt $1
}

# screenshot
sc() {
    screencapture -x ~/Pictures/$1
}

# --- Github CLI goodness ---
# select and go to gh issue on web
ghi() {
    local item
    item=$(gh issue list | fzf | awk '{print $1}')
    gh issue view $item --web
}

# select and go to gh pull on web
ghp() {
    local item
    item=$(gh pr list | fzf | awk '{print $1}')
    gh pr view $item --web
}

# Rerun a Github workflow
ghrr() {
    local runid
    runid=$(gh run list | fzf | cut -f7)
    if [[ -n $runid ]]
    then
        gh run rerun $runid
    fi
}

# select a PR and approve it after a short sleep
ghprsa() {
    local prid
    prid=$(gh pr list -L100 | fzf | cut -f1)
    if [[ -n $prid ]]
    then
        sleep 635 && gh pr review $prid --approve
    fi
}

# select from all PRs and view in vim
ghprl() {
    local prid
    prid=$(gh pr list -L100 | fzf | cut -f1)
    if [[ -n $prid ]]
    then
        gh pr view $prid | nvim -R -c 'set ft=markdown' -c 'norm! zt' -
    fi
}

# select from all PRs and comment (mainly used for dependabot)
ghprc() {
    local prid
    prid=$(gh pr list -L100 | fzf | cut -f1)
    if [[ -n $prid ]]
    then
        gh pr comment $prid -e
    fi
}

# select from PRs needing my review and create a todoist task
# proj and label ids are hardcoded - change to yours
# @TODO: allow for todoist options
ghprt() {
    local pr
    local prid
    local title
    pr=$(gh pr list -L100 --search "is:open is:pr review-requested:@me" | fzf)
    prid=$(echo "$pr" | cut -f1)
    title=$(echo "$pr" | cut -f2)
    if [[ -n $prid ]]
    then
        todoist add "PR Review: $title #$prid" -P 2236720344  -d today -L 2158924977,2159700119 -p 2
        echo "Todoist task created for PR $prid"
    fi
}

# view GH issue in Vim
ghiv() {
    gh issue view $1 | nvim -R -c 'set ft=markdown' -c 'norm! 8jzt' -
}

# view GH issue in browser
ghib() {
    gh issue view --web $1
}

# end gh cli goodness --

# create file, add to repo and open
tgav() {
    touch $1
    git add $1
    nvim $1
}

# node PBT: pull, build, test
npbt() {
    git pull
    npm ci
    npm test
}

# take, npm init and git init and ignore node_modules
tng() {
    take $1 && npm init -y && git init && echo "node_modules" >> .gitignore
}

# see environment variables
envs() {
    # ps eww -o command | tr ' ' '\n'
    printenv | fzf
}

# see node processes
nodes() {
    #	ps -aef | Rg 'node' --colors 'match:fg:magenta'
    ps wup $(pgrep -x node)
}

# get 12 newest or hottest posts from @subreddit & open selection in browser
# ex: > reddit neovim new
# @subreddit - Required (should default to `neovim` )
# @filter - new(default) | hot | or any listing filter: https://www.reddit.com/dev/api/#GET_hot - Optional
reddit() {
    local filter=${2:-new}
    local json
    local url
    # TODO: get a preview with `selftext`-->`\t\(.data.selftext[:30])`
    # TODO: make `limit` a variable
    # Note: Using SauceCodePro reddit icon in list items. Remove or replace as needed.
    json=$(curl -s -A 'Reddit Post Picker' "https://www.reddit.com/r/$1/$filter.json?limit=12" | jq -r '.data.children| .[] | " \(.data.title)\t\(.data.permalink)"')
    url=$(echo "$json" | fzf --delimiter='\t' --with-nth=1 | cut -f2)
    if [[ -n $url ]]; then
        open "https://www.reddit.com$url"
    fi
}

# Shorten Github URL with vanity (url, vanity code) - saves to clipboard! - MacOS - use `pbcopy` equiv for your OS
ghurl() {
    curl -i -s https://git.io -F "url=$1" -F "code=$2" | rg "Location" | cut -f 2 -d " " | pbcopy
}

# get JSON response from route and make it pretty
csjq() {
    curl -s $1 | jq
}

# changing dirs conditionally
# cdf - cd into the directory of the selected file
cdf() {
    local file
    local dir
    file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# find all git repos, select one and CD to its parent dir
cdg() {
    local file
    local dir
    file=$(fd -H -g .git | fzf) && dir=$(dirname "$file") && cd "$dir"
}

# look up Git worktrees and CD to selected! This was the best idea ever - 
td() {
    local wtdir
    wtdir=$(git worktree list | fzf | awk '{print $1}')
    if [[ -n $wtdir ]]; then
        cd "$wtdir"
    fi
}

# https://github.com/jesseduffield/lazygit#changing-directory-on-exit
lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
        cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
        rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

# [WIP] find vim-related help. Works but context is not helping. The query is not shown in preview. Only returns path.
fvh() {
    rg "$1" --ignore-case --files-with-matches --no-messages ~/notes/ ~/dotfiles/ ~/.vim/ ~/.config/nvim/ /usr/local/Caskroom/neovim-nightly/latest/nvim-osx64/share/nvim/runtime/doc/ ~/vim-dev/ | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 6 '$1' || rg --ignore-case --pretty --context 6 '$1' {}" --preview-window=up:50% --multi --select-1 --exit-0
}

# for `vg` grep- find-in-file(s)
fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --ignore-case --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 6 '$1' || rg --ignore-case --pretty --context 6 '$1' {}" --preview-window=right:60% --multi --select-1 --exit-0
}

# search for local Vim help using fvh
vh() {
    local file
    file=$(fvh $1)
    if [[ -n $file ]]
    then
        nvim $file -c /$1 -c 'norm! n zz'
    fi
}

# find in files - open in Vim - go to 1st search result
# vim - grep - takes a query to grep
vg() {
    local file
    file=$(fif $1)
    if [[ -n $file ]]
    then
        nvim $file -c /$1 -c 'norm! n zz'
    fi
}

# find a file and open it fzf → fd → Vim -- no args, looks in cwd - rg to highlight etc
vf() {
    IFS=$'\n' files=($(fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 6 '$1' || rg --ignore-case --pretty --context 6 '$1' {}" --preview-window=right:60%  --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && ${EDITOR:-nvim} "${files[@]}"
}

# search notes and open it in nvim
vn() {
    local note
    note=$(fd . '/Users/joel/notes' | fzf)
    if [[ -n $note ]]
    then
        nvim $note
    fi
}

# list vim sessions and select one to open
vs() {
    local ses
    ses=$(fd . '/Users/joel/vim-sessions' | fzf)
    if [[ -n $ses ]]
    then
        nvim -S $ses
    fi
}

# todoist cli - list todos then show detail
# https://github.com/sachaos/todoist#keybind
todos() {
    local todo
    todo=$(todoist list | fzf | awk '{print $1}')
    if [[ -n $todo ]]
    then
        todoist show $todo
    fi
}

# find rust crate and install
rc() {
    local crate
    crate=$(cargo search $1 | fzf | awk '{print $1}')
    cargo install $crate
}

# find word by partial string and pbcopy
word() {
    rg $1 /usr/share/dict/words | fzf | pbcopy
}

# fkill - kill processes - list only the ones you can kill.
fzfkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

#-------------------------------------------------------------------------------
#  lazygit
#-------------------------------------------------------------------------------
lgit() {
    local dir
    dir=$(find ~/Desktop -maxdepth 4 -type d ! -path "**/node_modules/*" | fzf -m)
    cd $dir
    lazygit
    cd
}

# -------------------------------------------------------------------
# NOTE: awesome fzf functions {{{
# -------------------------------------------------------------------
# Man without options will use fzf to select a page
fzf-man() {
MAN="/usr/bin/man"
if [ -n "$1" ]; then
    $MAN "$@"
    return $?
else
    $MAN -k . | fzf --reverse --preview="echo {1,2} | sed 's/ (/./' | sed -E 's/\)\s*$//' | xargs $MAN" | awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
    return $?
fi
}

manf() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

fzf-man-widget() {
batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
man -k . | sort \
    | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
    | fzf  \
    -q "$1" \
    --ansi \
    --tiebreak=begin \
    --prompt=' Man > '  \
    --preview-window '50%,rounded,<50(up,85%,border-bottom)' \
    --preview "${batman}" \
    --bind "enter:execute(man {1})" \
    --bind "alt-c:+change-preview(cht.sh {1})+change-prompt(ﯽ Cheat > )" \
    --bind "alt-m:+change-preview(${batman})+change-prompt( Man > )" \
    --bind "alt-t:+change-preview(tldr --color=always {1})+change-prompt(ﳁ TLDR > )"
    zle reset-prompt
}
# `Ctrl-H` keybinding to launch the widget (this widget works only on zsh, don't know how to do it on bash and fish (additionaly pressing`ctrl-backspace` will trigger the widget to be executed too because both share the same keycode)
bindkey '^h' fzf-man-widget
zle -N fzf-man-widget

# Eval commands on the fly within fzf
fzf-eval(){
echo | fzf -q "$*" --preview-window=up:99% --preview="eval {q}"
}

# Search list of your aliases and functions
fzf-aliases-functions() {
CMD=$(
(
(alias)
(functions | grep "()" | cut -d ' ' -f1 | grep -v "^_" )
) | fzf | cut -d '=' -f1
);

eval $CMD
}

# File Finder (Open in $EDITOR)
fzf-find-files(){
local file=$(fzf --multi --reverse) #get file from fzf
if [[ $file ]]; then
    for prog in $(echo $file); #open all the selected files
    do; $EDITOR $prog; done;
    else
        echo "cancelled fzf"
fi
}

# Find Dirs
fzf-cd() {
local dir
dir=$(find ${1:-.} -path '*/\.*' -prune \
    -o -type d -print 2> /dev/null | fzf +m) &&
    cd "$dir"
    ls
}

# Find Dirs + Hidden
fzf-cd-incl-hidden() {
local dir
dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
ls
}

# Change into the directory of the selected file
fzf-cd-to-file() {
local file
local dir
file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
ls
}

# Search Environment Variables
fzf-env-vars() {
local out
out=$(env | fzf)
echo $(echo $out | cut -d= -f2)
}

# kill process
fzf-kill-processes() {
local pid
pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

if [ "x$pid" != "x" ]
then
    echo $pid | xargs kill -${1:-9}
fi
}

# Enhanced Git Status (Open multiple files with tab + diff preview)
fzf-git-status() {
git rev-parse --git-dir > /dev/null 2>&1 || { echo "You are not in a git repository" && return }
local selected
selected=$(git -c color.status=always status --short |
    fzf --height 50% "$@" --border -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
    cut -c4- | sed 's/.* -> //')
    if [[ $selected ]]; then
        for prog in $(echo $selected);
        do; $EDITOR $prog; done;
    fi
}

# Checkout to existing branch or else create new branch
# Falls back to fuzzy branch selector list powered by fzf if no args.
# Replacement for both git checkout and git branch commands
# fzf-checkout - brings up fzf list of existing branches to checkout to on selection
# fzf-checkout <somenewbranch> - create and checkout to new branch
# fzf-checkout <someexistingbranchremoteorlocal> - checkout to existing branch
fzf-checkout(){
if git rev-parse --git-dir > /dev/null 2>&1; then
    if [[ "$#" -eq 0 ]]; then
        local branches branch
        branches=$(git branch -a) &&
            branch=$(echo "$branches" |
            fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
            git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
                elif [ `git rev-parse --verify --quiet $*` ] || \
                    [ `git branch --remotes | grep  --extended-regexp "^[[:space:]]+origin/${*}$"` ]; then
                                    echo "Checking out to existing branch"
                                    git checkout "$*"
                                else
                                    echo "Creating new branch"
                                    git checkout -b "$*"
    fi
else
    echo "Can't check out or create branch. Not in a git repo"
fi
}

# List Awesome FZF Functions
fzf-awesome-list() {
if [[ -f $AWESOME_FZF_LOCATION ]]; then
    selected=$(grep -E "(function fzf-)(.*?)[^(]*" $AWESOME_FZF_LOCATION | sed -e "s/function fzf-//" | sed -e "s/() {//" | grep -v "selected=" | fzf --reverse --prompt="awesome fzf functions > ")
else
    echo "awesome fzf not found"
fi
case "$selected" in
    "");; #don't throw an exit error when we dont select anything
    *) "fzf-"$selected;;
esac
}

# Enhanced rm
fzf-rm() {
if [[ "$#" -eq 0 ]]; then
    local files
    files=$(find . -maxdepth 1 -type f | fzf --multi)
    echo $files | xargs -I '{}' rm {} #we use xargs to capture filenames with spaces in them properly
else
    command rm "$@"
fi
}

# Delete multiple files with FZF
rmf() {
    ls | fzf -m | xargs -I {} rm {}
}
# }}}
# -------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  tmux
#-------------------------------------------------------------------------------
tmuxkillf () {
    local sessions
    sessions="$(tmux ls|fzf --exit-0 --multi)"  || return $?
    local i
    for i in "${(f@)sessions}"
    do
        [[ $i =~ '([^:]*):.*' ]] && {
            echo "Killing $match[1]"
                    tmux kill-session -t "$match[1]"
                }
            done
        }

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
tm() {
    [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
    if [ $1 ]; then
        tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
    fi
    session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
    local session
    session=$(tmux list-sessions -F "#{session_name}" | \
        fzf --query="$1" --select-1 --exit-0) &&
        tmux switch-client -t "$session"
    }

# ftpane - switch pane
ftpane() {
    local panes current_window current_pane target target_window target_pane
    panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
    current_pane=$(tmux display-message -p '#I:#P')
    current_window=$(tmux display-message -p '#I')

    target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

    target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
    target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

    if [[ $current_window -eq $target_window ]]; then
        tmux select-pane -t ${target_window}.${target_pane}
    else
        tmux select-pane -t ${target_window}.${target_pane} &&
            tmux select-window -t $target_window
    fi
}

# -------------------------------------------------------------------
# NOTE: flatpak {{{
# -------------------------------------------------------------------
# CLR=$(for i in {0..7}; do echo "tput setaf $i"; done)
BLK=\$(tput setaf 0); RED=\$(tput setaf 1); GRN=\$(tput setaf 2); YLW=\$(tput setaf 3); BLU=\$(tput setaf 4);
MGN=\$(tput setaf 5); CYN=\$(tput setaf 6); WHT=\$(tput setaf 7); BLD=\$(tput bold); RST=\$(tput sgr0);

AWK_VAR="awk -v BLK=${BLK} -v RED=${RED} -v GRN=${GRN} -v YLW=${YLW} -v BLU=${BLU} -v MGN=${MGN} -v CYN=${CYN} -v WHT=${WHT} -v BLD=${BLD} -v RST=${RST}"

# Searches only from flathub repository
fzf-flatpak-install-widget() {
flatpak remote-ls flathub --cached --columns=app,name,description \
    | awk -v cyn=$(tput setaf 6) -v blu=$(tput setaf 4) -v bld=$(tput bold) -v res=$(tput sgr0) \
    '{
    app_info="";
    for(i=2;i<=NF;i++){
        app_info=cyn app_info" "$i
    };
    print blu bld $2" -" res app_info "|" $1
}' \
    | column -t -s "|" -R 3 \
    | fzf \
    --ansi \
    --with-nth=1.. \
    --prompt="Install > " \
    --preview-window "nohidden,40%,<50(down,50%,border-rounded)" \
    --preview "flatpak --system remote-info flathub {-1} | $AWK_VAR -F\":\" '{print YLW BLD \$1 RST WHT \$2}'" \
    --bind "enter:execute(flatpak install flathub {-1})" # when pressed enter it doesn't showing the key pressed but it is reading the input
    zle reset-prompt
}
bindkey '^[f^[i' fzf-flatpak-install-widget #alt-f + alt-i
zle -N fzf-flatpak-install-widget

fzf-flatpak-uninstall-widget() {
touch /tmp/uns
flatpak list --columns=application,name \
    | awk -v cyn=$(tput setaf 6) -v blu=$(tput setaf 4) -v bld=$(tput bold) -v res=$(tput sgr0)  \
    '{
    app_id="";
    for(i=2;i<=NF;i++){
        app_id" "$i
    };
    print bld cyn $2 " - " res blu $1
}' \
    | column -t \
    | fzf \
    --ansi \
    --with-nth=1.. \
    --prompt="  Uninstall > " \
    --header="M-u: Uninstall | M-r: Run" \
    --header-first \
    --preview-window "nohidden,50%,<50(up,50%,border-rounded)" \
    --preview  "flatpak info {3} | $AWK_VAR -F\":\" '{print RED BLD  \$1 RST \$2}'" \
    --bind "alt-r:change-prompt(Run > )+execute-silent(touch /tmp/run && rm -r /tmp/uns)" \
    --bind "alt-u:change-prompt(Uninstall > )+execute-silent(touch /tmp/uns && rm -r /tmp/run)" \
    --bind "enter:execute(
    if [ -f /tmp/uns ]; then
        flatpak uninstall {3};
    elif [ -f /tmp/run ]; then
        flatpak run {3};
    fi
    )" # same as the install one but when pressed  entered the message is something like this
    # "Proceed with these changes to the system installation? [Y/n]:" but it will uninstall the selected app weird but idk y
    rm -f /tmp/{uns,run} &> /dev/null
    zle reset-prompt
}
bindkey '^[f^[u' fzf-flatpak-uninstall-widget #alt-f + alt-u
zle -N fzf-flatpak-uninstall-widget
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: homebrew {{{
# -------------------------------------------------------------------
# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]ackage
bip() {
    local inst=$(brew search "$@" | fzf -m)

    if [[ $inst ]]; then
        for prog in $(echo $inst);
        do; brew install $prog; done;
    fi
}
# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]ackage
bup() {
    local upd=$(brew leaves | fzf -m)

    if [[ $upd ]]; then
        for prog in $(echo $upd);
        do; brew upgrade $prog; done;
    fi
}
# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]ackage (e.g. uninstall)
bcp() {
    local uninst=$(brew leaves | fzf -m)

    if [[ $uninst ]]; then
        for prog in $(echo $uninst);
        do; brew uninstall $prog; done;
    fi
}
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: custom build {{{
# -------------------------------------------------------------------
open-line() {
    vi $(rg --hidden --line-number . | fzf --delimiter ':' --preview 'bat --color=always --highlight-line {2} {1}' | awk -F ':' '{print "+"$2" "$1}')
}

# }}}
# -------------------------------------------------------------------
