#!/usr/bin/env zsh

# NOTE: from https://gist.github.com/joelpalmer/7f92a5a337097f25f6dc8eaeb831028b

# zd - use zoxide & FZF to find and go to directory
# Not sure why zoxide query -i with FZF doesn't CD

# CD into {dir} and then exag
cde() {
    cd $1
}

# -------------------------------------------------------------------
# NOTE: zoxide {{{
# -------------------------------------------------------------------

# switch dirs using zoxide and fzf
zd() {
    local dir
    dir=$(zoxide query -l | fzf )
    cde $dir
}

# }}}
# -------------------------------------------------------------------

# --- Github CLI goodness ---
# select and go to gh issue on web
ghi() {
    local item
    item=$(gh issue list | fzf | awk '{print $1}')
    gh issue view $item --web
}

# select and go to gh pull on web
ghp() {
    local item
    item=$(gh pr list | fzf | awk '{print $1}')
    gh pr view $item --web
}

# Rerun a Github workflow
ghrr() {
    local runid
    runid=$(gh run list | fzf | cut -f7)
    if [[ -n $runid ]]
    then
        gh run rerun $runid
    fi
}

# select a PR and approve it after a short sleep
ghprsa() {
    local prid
    prid=$(gh pr list -L100 | fzf | cut -f1)
    if [[ -n $prid ]]
    then
        sleep 635 && gh pr review $prid --approve
    fi
}

# select from PRs needing my review and create a todoist task
# proj and label ids are hardcoded - change to yours
# @TODO: allow for todoist options
ghprt() {
    local pr
    local prid
    local title
    pr=$(gh pr list -L100 --search "is:open is:pr review-requested:@me" | fzf)
    prid=$(echo "$pr" | cut -f1)
    title=$(echo "$pr" | cut -f2)
    if [[ -n $prid ]]
    then
        todoist add "PR Review: $title #$prid" -P 1524801268  -d today -L 2166583954 -p 2
        echo "Todoist task created for PR $prid"
    fi
}

# end gh cli goodness --

# see environment variables
envs() {
    # ps eww -o command | tr ' ' '\n'
    printenv | fzf
}

# see node processes
nodes() {
    #	ps -aef | Rg 'node' --colors 'match:fg:magenta'
    ps wup $(pgrep -x node)
}

# get 12 newest or hottest posts from @subreddit & open selection in browser
# ex: > reddit neovim new
# @subreddit - Required (should default to `neovim` )
# @filter - new(default) | hot | or any listing filter: https://www.reddit.com/dev/api/#GET_hot - Optional
reddit() {
    local filter=${2:-new}
    local json
    local url
    # TODO: get a preview with `selftext`-->`\t\(.data.selftext[:30])`
    # TODO: make `limit` a variable
    # Note: Using SauceCodePro reddit icon in list items. Remove or replace as needed.
    json=$(curl -s -A 'Reddit Post Picker' "https://www.reddit.com/r/$1/$filter.json?limit=12" | jq -r '.data.children| .[] | " \(.data.title)\t\(.data.permalink)"')
    url=$(echo "$json" | fzf --delimiter='\t' --with-nth=1 | cut -f2)
    if [[ -n $url ]]; then
        open "https://www.reddit.com$url"
    fi
}

# get JSON response from route and make it pretty
csjq() {
    curl -s $1 | jq
}

# changing dirs conditionally
# cdf - cd into the directory of the selected file
cdf() {
    local file
    local dir
    file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# find all git repos, select one and CD to its parent dir
cdg() {
    local file
    local dir
    file=$(fd -H -g .git | fzf) && dir=$(dirname "$file") && cd "$dir"
}

# look up Git worktrees and CD to selected! This was the best idea ever - 
td() {
    local wtdir
    wtdir=$(git worktree list | fzf | awk '{print $1}')
    if [[ -n $wtdir ]]; then
        cd "$wtdir"
    fi
}

# https://github.com/jesseduffield/lazygit#changing-directory-on-exit
lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
        cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
        rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

# for `vg` grep- find-in-file(s)
fif() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    rg --ignore-case --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 6 '$1' || rg --ignore-case --pretty --context 6 '$1' {}" --preview-window=right:60% --multi --select-1 --exit-0
}

# search for local Vim help using fvh
vh() {
    local file
    file=$(fvh $1)
    if [[ -n $file ]]
    then
        nvim $file -c /$1 -c 'norm! n zz'
    fi
}

# find in files - open in Vim - go to 1st search result
# vim - grep - takes a query to grep
vg() {
    local file
    file=$(fif $1)
    if [[ -n $file ]]
    then
        nvim $file -c /$1 -c 'norm! n zz'
    fi
}

# find a file and open it fzf → fd → Vim -- no args, looks in cwd - rg to highlight etc
vf() {
    IFS=$'\n' files=($(fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 6 '$1' || rg --ignore-case --pretty --context 6 '$1' {}" --preview-window=right:60%  --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && ${EDITOR:-nvim} "${files[@]}"
}

# search notes and open it in nvim
vn() {
    local note
    note=$(fd . "$HOME/Projects/Personal/Github/dNotes" | fzf)
    if [[ -n $note ]]
    then
        nvim $note
    fi
}

# todoist cli - list todos then show detail
# https://github.com/sachaos/todoist#keybind
todos() {
    local todo
    todo=$(todoist list | fzf | awk '{print $1}')
    if [[ -n $todo ]]
    then
        todoist show $todo
    fi
}

# find rust crate and install
rc() {
    local crate
    crate=$(cargo search $1 | fzf | awk '{print $1}')
    cargo install $crate
}

# find word by partial string and pbcopy
word() {
    rg $1 /usr/share/dict/words | fzf | xclip
}

# fkill - kill processes - list only the ones you can kill.
fzfkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

#-------------------------------------------------------------------------------
#  lazygit
#-------------------------------------------------------------------------------
lgit() {
    local dir
    dir=$(find ~/Desktop -maxdepth 4 -type d ! -path "**/node_modules/*" | fzf -m)
    cd $dir
    lazygit
    cd
}

# -------------------------------------------------------------------
# NOTE: awesome fzf functions {{{
# -------------------------------------------------------------------
# Man without options will use fzf to select a page
fzf-man() {
MAN="/usr/bin/man"
if [ -n "$1" ]; then
    $MAN "$@"
    return $?
else
    batman="man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
    $MAN -k . | fzf --reverse --preview="$batman" | awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
    return $?
fi
}

manf() {
    man -k . | fzf -q "$1" --prompt='man> '  --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | xargs -r man
}

# Eval commands on the fly within fzf
fzf-eval(){
echo | fzf -q "$*" --preview-window=up:99% --preview="eval {q}"
}

# Search list of your aliases and functions
fzf-aliases-functions() {
CMD=$(
(
(alias)
(functions | grep "()" | cut -d ' ' -f1 | grep -v "^_" )
) | fzf | cut -d '=' -f1
);

eval $CMD
}

# Search Environment Variables
fzf-env-vars() {
local out
out=$(env | fzf)
echo $(echo $out | cut -d= -f2)
}

# kill process
fzf-kill-processes() {
local pid
pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

if [ "x$pid" != "x" ]
then
    echo $pid | xargs kill -${1:-9}
fi
}

# Delete multiple files with FZF
rmf() {
    ls | fzf -m | xargs -I {} rm {}
}
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: my functions {{{
# -------------------------------------------------------------------
open-line() {
    vi $(rg --hidden --line-number . | fzf --delimiter ':' --preview 'bat --color=always --highlight-line {2} {1}' | awk -F ':' '{print "+"$2" "$1}')
}

timezsh() {
    shell=${1-$SHELL}
    for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

killport() {
    PID=$(sudo lsof -t -i:$1)
    sudo kill -9 ${PID}
}
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: pomodoro {{{
# -------------------------------------------------------------------
# Requires https://github.com/caarlos0/timer to be installed. spd-say should ship with your distro

declare -A pomo_options
pomo_options["work"]="45"
pomo_options["break"]="10"

pomodoro () {
  if [ -n "$1" -a -n "${pomo_options["$1"]}" ]; then
  val=$1
  clear
  echo $val | lolcat
  timer ${pomo_options["$val"]}m
  spd-say "'$val' session done"
  fi
}
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: sesh: tmux session manager {{{
# -------------------------------------------------------------------
function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
# }}}
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# NOTE: custom widgets {{{
# -------------------------------------------------------------------

# tmux-sessionizer
tmux_sessionizer_widget() {
  tmux-sessionizer
}

# tmuxinator-sessionizer
tmuxinator_sessionizer_widget() {
  tmuxinator-sessionizer
}

# search and open in neovim
fzf_search_widget() {
    tsnv
}
# }}}
# -------------------------------------------------------------------
